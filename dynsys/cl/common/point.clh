<% if mako_include_guard(globals()["_template_uri"]): return STOP_RENDERING %>

<%include file="/common/types.clh" />

<%
    dim = len(system.equations)
%>

inline point_t pt_round(point_t value, real_t tolerance) {
// TODO more sophisticated rounding?
% if dim == 1:
    return convert_real(convert_long_rtz(value / tolerance)) * tolerance;
% else:
% for i in range(dim):
    value.s${i} = convert_real(convert_long_rtz(value.s${i} / tolerance)) * tolerance;
% endfor
    return value;
% endif
}

inline point_t pt_add(point_t a, point_t b) {
% if dim in {1, 2, 3, 4, 8, 16}:
    return a + b;
% else:
% for i in range(dim):
    a.s${i} += b.s${i};
% endfor
    return a;
% endif
}

inline point_t pt_sub(point_t a, point_t b) {
% if dim in {1, 2, 3, 4, 8, 16}:
    return a - b;
% else:
% for i in range(dim):
    a.s${i} -= b.s${i};
% endfor
    return a;
% endif
}

inline point_t pt_mul(point_t a, point_t b) {
% if dim in {1, 2, 3, 4, 8, 16}:
    return a * b;
% else:
% for i in range(dim):
    a.s${i} *= b.s${i};
% endfor
    return a;
% endif
}

inline point_t pt_mul_scalar(point_t a, real_t b) {
% if dim in {1, 2, 3, 4, 8, 16}:
    return a * b;
% else:
% for i in range(dim):
    a.s${i} *= b;
% endfor
    return a;
% endif
}

inline real_t pt_sum(point_t a) {
% if dim == 1:
    return a;
% else:
    // TODO use pairwise summation
    real_t s = 0;
% for i in range(dim):
    s += a.s${i};
% endfor
    return s;
% endif
}

inline real_t pt_length(point_t a) {
% if dim in {1, 2, 3, 4}:
    return length(a);
% else:
    return sqrt(pt_sum(pt_mul(a, a)));
% endif
}

inline real_t pt_dot(point_t a, point_t b) {
% if dim in {1, 2, 3, 4}:
    return dot(a, b);
% else:
    return pt_sum(pt_mul(a, b));
% endif
}

